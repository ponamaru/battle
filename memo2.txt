function onFs(fs) {
  fs.root.getDirectory(
    "Documents",
    { create: true },
    (directoryEntry) => {
      //directoryEntry.isFile === false
      //directoryEntry.isDirectory === true
      //directoryEntry.name === 'Documents'
      //directoryEntry.fullPath === '/Documents'
    },
    onError,
  );
}

  import jszip from 'jszip'
  import saveAs from 'filesaver'
  export default{
    methods:{
       make(){
         let zip = new jszip(); //インスタンス作成
         zip.folder('icon').file('test.txt','hello world') //iconフォルダを作り、その中にtest.txtファイルを作っている。
         zip.file('practice.js','hello') // iconフォルダと同じ階層にjsファイルを作っている。
　
         zip.generateAsync({type:'blob'}) //blobタイプのzipを作成。
           .then(function(blob){ //zipデータを受け取る。
             saveAs(blob,"hello.zip") //第一引数は受け取ったzipデータ,第二引数はzipの名前(.zipは無くてもいい)
           })
       }
   }

const imageUrls = [
  'https://chrysanthemum94.example.com/imageA.png',
  'https://chrysanthemum94.example.com/imageB.png',
  'https://chrysanthemum94.example.com/imageC.png',
];
Promise.all(
  imageUrls.map((url) => {return getImage(url);})
).then((blobs) => {
  generateZip(blobs).then((zip) => {
    console.log(URL.createObjectURL(zip))
  });
});

var zipper = new Zipper("zipName");
zipper.file("file1.txt", "file1 data"); 
var f = zipper.folder("folderName");  //引数はフォルダ名
f.file("file2.txt", "file2 data"); 
var a = document.getElementById('download');  //a要素を
zipper.link(a);  //zipダウンロード用のリンクに
zipper.download(); 
